{"version":3,"sources":["../src/app.js"],"names":["mongoose","Promise","global","connect","useUnifiedTopology","useNewUrlParser","then","console","log","catch","error","err","app","use","express","json","urlencoded","extended","router","req","res","next","Error","message","status","port","process","env","PORT","listen"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEAA,mBAASC,OAAT,GAAmBC,OAAOD,OAA1B;AACAD,mBACGG,OADH,CAEI,wGAFJ,EAGI,EAAEC,oBAAoB,IAAtB,EAA4BC,iBAAiB,IAA7C,EAHJ,EAKGC,IALH,CAKQ;AAAA,SAAMC,QAAQC,GAAR,CAAY,sBAAZ,CAAN;AAAA,CALR,EAMGC,KANH,CAMS;AAAA,SAAOF,QAAQG,KAAR,CAAcC,GAAd,CAAP;AAAA,CANT;;AAQA,IAAMC,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAEAD,IAAIC,GAAJ,CAAQC,kBAAQC,IAAR,EAAR;AACAH,IAAIC,GAAJ,CAAQC,kBAAQE,UAAR,CAAmB,EAACC,UAAS,IAAV,EAAnB,CAAR;;AAEAL,IAAIC,GAAJ,CAAQ,MAAR,EAAgBK,eAAhB;;AAEAN,IAAIC,GAAJ,CAAQ,UAACM,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAgB;AACtB,MAAMX,QAAO,IAAIY,KAAJ,CAAU,WAAV,CAAb;AACAZ,QAAMa,OAAN,GAAc,eAAd;AACAb,QAAMc,MAAN,GAAa,GAAb;AACAH,OAAKX,KAAL;AACD,CALD;;AAOAE,IAAIC,GAAJ,CAAQ,UAACH,KAAD,EAAOS,GAAP,EAAWC,GAAX,EAAeC,IAAf,EAAsB;AAC5BD,MAAII,MAAJ,CAAWd,MAAMc,MAAN,IAAgB,GAA3B;AACA,SAAOJ,IAAIL,IAAJ,CAAS,EAAEL,OAAM;AACtBa,eAAQb,MAAMa;AADQ,KAAR,EAAT,CAAP;AAGD,CALD;;AAWA,IAAME,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;;AAEAhB,IAAIiB,MAAJ,CAAWJ,IAAX,EAAgB,YAAI;AAClBlB,UAAQC,GAAR,CAAY,uBAAZ,EAAoCiB,IAApC;AACD,CAFD","file":"app.js","sourcesContent":["import express from 'express';\r\nimport mongoose from 'mongoose';\r\nimport logger from 'morgan';\r\n\r\nimport { router } from './config/routers/invoice.router';\r\n\r\nmongoose.Promise = global.Promise;\r\nmongoose\r\n  .connect(\r\n    'mongodb+srv://invoice-builder:12345@invoice-builder-zdirm.mongodb.net/test?retryWrites=true&w=majority',\r\n    { useUnifiedTopology: true, useNewUrlParser: true }\r\n  )\r\n  .then(() => console.log('ðŸ’» Mondodb Connected'))\r\n  .catch(err => console.error(err));\r\n\r\nconst app = express();\r\napp.use(logger('dev'))\r\n\r\napp.use(express.json())\r\napp.use(express.urlencoded({extended:true}))\r\n\r\napp.use('/api', router);\r\n\r\napp.use((req,res,next)=>{\r\n  const error =new Error('Not Found');\r\n  error.message='Invalid route'\r\n  error.status=404;\r\n  next(error)\r\n})\r\n\r\napp.use((error,req,res,next)=>{\r\n  res.status(error.status || 500)\r\n  return res.json({ error:{\r\n    message:error.message\r\n  } });\r\n})\r\n\r\n\r\n\r\n\r\n\r\nconst port = process.env.PORT || 5000;\r\n\r\napp.listen(port,()=>{\r\n  console.log('server start on port ',port);\r\n})\r\n"]}